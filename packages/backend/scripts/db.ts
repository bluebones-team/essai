import {
  ColumnDefinitionBuilder,
  sql,
  type ColumnDataType,
  type Compilable,
  type Expression,
} from 'kysely';
import { map } from 'shared';
import { posInt, tables } from 'shared/data';
import { zocker } from 'zocker';
import { z } from 'zod';
import { db, pg } from '../src/client/db';

async function executeAndLogQueries(task: () => Compilable[]) {
  const name = task.name;
  const queries = task();
  const compileds = await Promise.allSettled(queries.map((q) => q.compile()));
  const sql = compileds.reduce(
    (acc, result) =>
      `${acc}\n${
        result.status === 'fulfilled'
          ? result.value.parameters.length
            ? `-- shouldn't have params: ${result.value.sql}`
            : `${result.value.sql};`
          : `-- ${result.reason}`
      }`,
    `-- generated by ${import.meta.url}`,
  );
  await Promise.allSettled([pg.query(sql), Bun.write(`temp/${name}.sql`, sql)]);
  console.log(`${name} done`);
}

function clearTables() {
  return map(tables, (v, k) => db.deleteFrom(k as keyof BTables));
}
function dropTables() {
  return map(tables, (v, k) =>
    db.schema
      .dropTable(k as keyof BTables)
      .ifExists()
      .cascade(),
  );
}
function createTables() {
  function zod_sqlType(schema: z.ZodTypeAny): ColumnDataType | Expression<any> {
    if (schema instanceof z.ZodString) {
      if (schema.isUUID) return 'uuid';
      return 'varchar';
    }
    if (schema instanceof z.ZodNumber) {
      if (schema.isInt) return 'integer';
      return 'double precision';
    }
    if (schema instanceof z.ZodBoolean) return 'boolean';
    if (schema instanceof z.ZodUnion) {
      if (
        (schema.options as z.ZodType[]).every(
          (option) =>
            option instanceof z.ZodLiteral && Number.isInteger(option.value),
        )
      )
        return 'integer';
    }
    if (schema instanceof z.ZodArray) {
      const elementType = zod_sqlType(schema.element);
      //@ts-ignore
      return sql`${sql.raw(elementType)}[]`;
    }
    if (schema instanceof z.ZodBranded || schema instanceof z.ZodOptional)
      return zod_sqlType(schema.unwrap());
    if (schema instanceof z.ZodObject) return 'jsonb';
    throw new Error(`Unsupported Zod type: ${schema._def.typeName}`);
  }
  function zod_sqlColumn(schema: z.ZodTypeAny, col: ColumnDefinitionBuilder) {
    const { metadata: _meta } = schema;
    if (!_meta) return col;
    if (_meta.primaryKey) return col.primaryKey();
    if (_meta.unique) return col.unique();
    if (_meta.references)
      return col.references(_meta.references).onDelete('cascade');
    return col;
  }
  return [
    ...map(tables, (v, k) => {
      const query = Object.entries(v.back.shape).reduce(
        (query, [k, v]: [string, z.ZodType]) => {
          return query.addColumn(k, zod_sqlType(v), (col) =>
            zod_sqlColumn(v, col).notNull(),
          );
        },
        db.schema.createTable(k).ifNotExists(),
      );
      return query;
    }),
    db.schema
      .alterTable('user_participant')
      .addPrimaryKeyConstraint('user_participant_pkey', [
        'uid',
        'puid',
        'rtype',
      ]),
    db.schema
      .alterTable('recruitment_participant')
      .addPrimaryKeyConstraint('recruitment_participant_pkey', ['uid', 'rcid']),
    db.schema
      .alterTable('message_read')
      .addPrimaryKeyConstraint('message_read_pkey', ['mid', 'uid']),
  ];
}
function insertMockDatas() {
  function randomField<T, K extends keyof T>(arr: T[], field: K) {
    return arr[Math.floor(Math.random() * arr.length)][field];
  }
  const users = zocker(tables.user.back).generateMany(100);
  /**@DEBUG */
  Object.assign(users[0], { phone: '15392964346', pwd: '1`O%$`ke' });
  const user_participants = zocker(tables.user_participant.back)
    .generateMany(100)
    .map((e) => ({
      ...e,
      uid: randomField(users, 'uid'),
      puid: randomField(users, 'uid'),
    }));
  const experiments = zocker(tables.experiment.back)
    .generateMany(100)
    .map((e) => ({ ...e, uid: randomField(users, 'uid') }));
  const recruitments = zocker(tables.recruitment.back)
    /**@DEBUG
     * @ts-ignore */
    .supply(tables.recruitment.back.shape.durations, () =>
      zocker(posInt.max(1440).array()).generate(),
    )
    .generateMany(100)
    .map((e) => ({ ...e, eid: randomField(experiments, 'eid') }));
  const recruitment_conditions = zocker(tables.recruitment_condition.back)
    .generateMany(100)
    .map((e) => ({ ...e, rid: randomField(recruitments, 'rid') }));
  const recruitment_participants = zocker(tables.recruitment_participant.back)
    .generateMany(100)
    .map((e) => ({
      ...e,
      rcid: randomField(recruitment_conditions, 'rcid'),
      uid: randomField(users, 'uid'),
    }));
  const messages = zocker(tables.message.back)
    .generateMany(100)
    .map((e) => ({ ...e, uid: randomField(users, 'uid') }));
  const queries = map(
    {
      users,
      user_participants,
      experiments,
      recruitments,
      recruitment_conditions,
      recruitment_participants,
      messages,
    },
    (datas, table) =>
      db
        //@ts-ignore
        .insertInto(table.slice(0, -1))
        .values(datas),
  );
  return queries.reduce(
    (acc, q) => acc.then(() => q.execute()),
    Promise.resolve<any>(null),
  );
}

const tasks = {
  async mock() {
    await executeAndLogQueries(clearTables);
    await insertMockDatas();
  },
  async reset() {
    await executeAndLogQueries(dropTables);
    await executeAndLogQueries(createTables);
  },
};
const cmd = process.argv[2];
if (Object.prototype.hasOwnProperty.call(tasks, cmd)) {
  //@ts-ignore
  tasks[cmd]();
} else {
  console.error(`Usage: bun mock.ts <${Object.keys(tasks).join('|')}>`);
  process.exit(1);
}
